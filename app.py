import matplotlib
matplotlib.use('Agg')  # Prevent tkinter GUI backend errors
from flask import Flask, request, jsonify, send_file, render_template
from io import BytesIO
import matplotlib.pyplot as plt
import networkx as nx
from graph_module import (
    numerical_semigroup_graph,
    find_maximum_independent_set,
    perfect_circle_layout
)



app = Flask(__name__, template_folder='templates')

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.get_json()
    generators = sorted(set(data.get("generators", [])))

    try:
        G, gaps, edges = numerical_semigroup_graph(generators)
        mis, alpha = find_maximum_independent_set(G)

        result = {
            "generators": generators,
            "num_nodes": len(gaps),
            "num_edges": len(edges),
            "independent_number": alpha,
            "independent_set": sorted(mis),
            "sample_edges": edges[:5],
        }

        return jsonify(result)
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/plot", methods=["POST"])
def plot_graph():
    data = request.get_json()
    generators = sorted(set(data.get("generators", [])))

    try:
        G, gaps, _ = numerical_semigroup_graph(generators)
        pos = perfect_circle_layout(G, gaps)

        plt.figure(figsize=(8, 8))
        nx.draw(
            G, pos, with_labels=(len(gaps) <= 50),
            node_color='skyblue', edgecolors='black',
            node_size=300, font_size=8
        )
        plt.title(f"Gap Graph of <{', '.join(map(str, generators))}>")
        plt.axis("off")

        buf = BytesIO()
        plt.savefig(buf, format="png")
        plt.close()
        buf.seek(0)

        return send_file(buf, mimetype="image/png")
    except Exception as e:
        return jsonify({"error": str(e)})
@app.route("/chatbot", methods=["POST"])
def chatbot():
    data = request.get_json()
    user_msg = data.get("message", "").lower()

    # Comprehensive responses
    if any(word in user_msg for word in ["independent", "α", "alpha"]):
        response = (
            "The independent number α(G) (or independence number) of a gap graph is:\n"
            "1. The size of the largest set of vertices where no two are adjacent\n"
            "2. Represents the maximum number of gaps that cannot combine to form another gap\n"
            "3. For semigroup <n₁,n₂,...>, it measures the graph's 'sparseness'\n"
            "4. Computed using networkx's approximation.maximum_independent_set()"
        )
    
    elif any(word in user_msg for word in ["gap", "gaps"]):
        response = (
            "Gaps (or holes) in numerical semigroups:\n"
            "1. Numbers not representable by linear combinations of generators\n"
            "2. Form the vertices/nodes of the gap graph\n"
            "3. Example: For <3,5>, gaps are {1,2,4,7}\n"
            "4. The largest gap is called the Frobenius number"
        )
    
    elif any(word in user_msg for word in ["edge", "edges"]):
        response = (
            "Edges in gap graphs connect two gaps when:\n"
            "1. Their sum belongs to the semigroup\n"
            "2. Represent potential 'non-gap' combinations\n"
            "3. Example: In <3,5>, edge between 1 and 4 because 1+4=5 ∈ <3,5>\n"
            "4. The edge count affects the graph's density and properties"
        )
    
    elif any(word in user_msg for word in ["graph", "structure"]):
        response = (
            "Gap graph properties:\n"
            "1. Undirected simple graph\n"
            "2. Vertex set = gaps of the semigroup\n"
            "3. Edge set = {(g₁,g₂) | g₁+g₂ ∈ S}\n"
            "4. The graph's diameter, connectivity, and clique number reveal algebraic properties"
        )
    
    elif any(word in user_msg for word in ["semigroup", "numerical"]):
        response = (
            "Numerical semigroups:\n"
            "1. Additive submonoids of ℕ with finite complement\n"
            "2. Generated by coprime integers n₁,n₂,...,nₖ\n"
            "3. The gap graph encodes additive structure of gaps\n"
            "4. Applications in algebraic geometry and coding theory"
        )
    
    elif any(word in user_msg for word in ["layout", "circle"]):
        response = (
            "Graph visualization details:\n"
            "1. Uses perfect_circle_layout() for vertex placement\n"
            "2. Nodes arranged evenly on a unit circle\n"
            "3. Angular position: 2πi/n - π/2 (top-start)\n"
            "4. Edge drawing shows the sum relationships"
        )
    
    elif any(word in user_msg for word in ["compute", "calculation"]):
        response = (
            "Computation process:\n"
            "1. First pass: Generate semigroup elements up to 200\n"
            "2. Identify gaps (missing numbers)\n"
            "3. Second pass: Extend to max(gᵢ + gⱼ) for complete edges\n"
            "4. Uses itertools.combinations for edge generation"
        )
    
    elif any(word in user_msg for word in ["application", "use"]):
        response = (
            "Applications of gap graphs:\n"
            "1. Studying non-representable numbers\n"
            "2. Analyzing semigroup structure\n"
            "3. Connections to toric geometry\n"
            "4. Error-correcting code design"
        )
    elif any(word in user_msg for word in ["How are you","Hi", "Whats going on"]):
        response = (
            "I am fine and ready to anser your questions about this mini graph app."
            
        )
    
    elif any(word in user_msg for word in ["generator", "input"]):
        response = (
            "Generator requirements:\n"
            "1. Must be positive integers\n"
            "2. Should be coprime for nontrivial gaps\n"
            "3. Typical examples: <3,5>, <6,9,20>\n"
            "4. Larger generators produce more complex graphs"
        )
    
    else:
        response = (
            "I can explain these concepts:\n"
            "1. Independent number (α)\n"
            "2. Gap properties\n"
            "3. Edge formation rules\n"
            "4. Graph structure\n"
            "5. Semigroup theory\n"
            "6. Visualization\n"
            "7. Applications\n"
            "Ask about any of these topics!"
        )

    return jsonify({"response": response})


if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

